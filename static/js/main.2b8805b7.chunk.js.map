{"version":3,"sources":["components/Map/Map.js","assets/your_location_pin.png","assets/restaurant_pin.png","assets/rc_logo.png","api/index.js","components/Map/styles.js","App.js","index.js"],"names":["directionsService","getRestaurants","a","axios","get","window","location","href","then","res","data","catch","err","makeStyles","theme","rcLogo","height","width","verticalAlign","marginRight","paper","padding","display","flexDirection","justifyContent","mapContainer","sidebar","backgroundColor","color","sidebarItem","sidebarTitle","checkbox","markerContainer","position","transform","zIndex","pointer","cursor","locateBtn","top","right","border","locateIcon","drawBtn","paddingLeft","paddingRight","textTransform","bottom","left","drawBtnDisabled","snackbar","dialogTitle","paddingTop","paddingBottom","dialogContent","dialogActions","dialogButtons","borderRadius","icon","marginBottom","review","marginTop","reviewText","fontSize","directionGoBtn","drawOnMapBtn","clearDrawingBtn","closeBtn","libraries","cebuCoordinates","lat","lng","options","styles","disableDefaultUI","zoomControl","mapContainerStyle","TransitionDown","forwardRef","props","ref","Slide","direction","Map","classes","useStyles","useState","restoPosition","setRestoPosition","restoMarkers","setRestoMarkers","markersInBounds","setMarkersInBounds","markersPlaceholder","setMarkersPlaceholder","selected","setSelected","drawMode","setDrawMode","snackbarOpen","setSnackbarOpen","currentLocation","setCurrentLocation","useForm","register","handleSubmit","reset","watch","setValue","dialogOpen","setDialogOpen","placeInfoOpen","setPlaceInfoOpen","inBoundsMarkerInfoOpen","setInBoundsMarkerInfoOpen","directionsResult","setDirectionsResult","directions","filters","drawing","listToggleStatus","setListToggleStatus","fineDining","casualDining","fastFood","cafe","unlimitedFood","others","restoTypeFilter","setRestoTypeFilter","daysOpenWatch","directionOriginWatch","directionDestinationWatch","rectangle","setRectangle","circle","setCircle","useEffect","fetchRestaurantData","markers","sortedRestoData","sort","b","textA","name","toUpperCase","textB","filteredTypes","Object","keys","filter","key","filterRestoData","filteredMarkers","resto","arr","q","type","findIndex","item","toLocaleLowerCase","replace","toLowerCase","handleFiltersChange","event","target","checked","handleListItemChange","listItem","listItemValue","directionsVal","filtersVal","drawingVal","clearMapDrawing","handleDialogClose","handlePlaceInfoClose","handleInBoundsMarkerInfoClose","useLoadScript","googleMapsApiKey","process","isLoaded","loadError","GetLocation","panToLocation","Fab","className","size","onClick","handleLocateUserClick","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","phDateNow","Date","phFormattedDate","toLocaleString","month","getDate","getFullYear","phFormattedTime","toLocaleTimeString","dateCreated","handleSaveRestaurant","useCallback","values","updatedRestoData","id","parseFloat","restoName","restoType","address","description","phone","specialtyFood","avgCustomer","totalCustomerVisits","timeOpen","timeClose","daysOpen","otherDaysOpen","error","handleGetDirections","google","maps","DirectionsService","origin","directionOrigin","destination","directionDestination","route","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","console","PlaceInfoWindow","restoDetails","Dialog","open","TransitionComponent","keepMounted","onClose","PaperProps","style","boxShadow","Typography","variant","DialogContent","DialogContentText","Grid","container","spacing","align","xs","reviews","map","reviewerName","rating","comment","DialogActions","Button","MarkersInBoundsInfoWindow","length","Divider","mapRef","current","panTo","setZoom","onMapClick","mode","latLng","useRef","onMapLoad","checkMarkersInBounds","shape","inBoundMarkers","forEach","restaurantPosition","geometry","spherical","computeDistanceBetween","getCenter","getRadius","push","getBounds","contains","zoom","center","onLoad","Snackbar","ContentProps","root","anchorOrigin","vertical","horizontal","message","drawingControl","drawingControlOptions","ControlPosition","TOP_CENTER","drawingModes","OverlayType","CIRCLE","RECTANGLE","rectangleOptions","strokeWeight","clickable","editable","visible","onRectangleComplete","setMap","onCircleComplete","onUnmount","drawingManager","bounds","radius","marker","animation","url","restoPin","scaledSize","Size","Point","labelOrigin","label","text","fontWeight","currentLocationPin","anchor","DialogTitle","onSubmit","TextField","autoFocus","margin","fullWidth","required","FormControl","InputLabel","Select","labelId","placeholder","defaultValue","MenuItem","value","md","InputLabelProps","shrink","alignItems","src","logo","alt","List","component","ListItem","button","Grow","in","transformOrigin","timeout","inputProps","readOnly","InputProps","FormHelperText","disabled","FormGroup","FormControlLabel","control","Checkbox","onChange","App","CssBaseline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b8805b7.chunk.js","sourcesContent":["import { useState, useEffect, useCallback, forwardRef, useRef } from 'react';\r\nimport { GoogleMap, useLoadScript, Marker, DirectionsRenderer, DrawingManager, Rectangle, Circle } from '@react-google-maps/api';\r\nimport { Button, Fab, Typography, Snackbar, Slide, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, FormControl, InputLabel, Select, MenuItem, Grid, FormGroup, FormControlLabel, FormHelperText, Checkbox, Divider, List, ListItem, Grow } from '@material-ui/core';\r\nimport currentLocationPin from './../../assets/your_location_pin.png';\r\nimport MyLocationIcon from '@material-ui/icons/MyLocation';\r\nimport LocationOnIcon from '@material-ui/icons/LocationOn';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport RateReviewIcon from '@material-ui/icons/RateReview';\r\nimport NavigationIcon from '@material-ui/icons/Navigation';\r\nimport restoPin from './../../assets/restaurant_pin.png';\r\nimport logo from './../../assets/rc_logo.png';\r\nimport { getRestaurants } from './../../api/index';\r\nimport { useForm } from 'react-hook-form';\r\nimport useStyles from './styles';\r\n\r\nconst libraries = [\"drawing\", \"directions\", \"geometry\"];\r\nconst cebuCoordinates = { lat: 10.3157, lng: 123.8854 };\r\n\r\n// Commented: potential error handler\r\n// const handleLocationError = (browserHasGeolocation, infoWindow, pos) => {\r\n//     infoWindow.setPosition(pos);\r\n//     infoWindow.setContent(\r\n//         browserHasGeolocation\r\n//             ? \"Error: The Geolocation service failed.\"\r\n//             : \"Error: Your browser doesn't support geolocation.\"\r\n//     );\r\n//     // infoWindow.open(map);\r\n// }\r\n\r\nconst options = {\r\n    styles: [\r\n        {\r\n            \"featureType\": \"poi\",\r\n            \"elementType\": \"labels.icon\",\r\n            \"stylers\": [\r\n                {\r\n                    \"visibility\": \"off\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"featureType\": \"transit\",\r\n            \"elementType\": \"labels.icon\",\r\n            \"stylers\": [\r\n                {\r\n                    \"visibility\": \"off\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    disableDefaultUI: true,\r\n    zoomControl: true,\r\n};\r\n\r\nconst mapContainerStyle = {\r\n    width: \"100%\",\r\n    height: \"100vh\"\r\n};\r\n\r\nconst TransitionDown = forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nlet directionsService;\r\n\r\nconst Map = () => {\r\n    const classes = useStyles();\r\n    const [restoPosition, setRestoPosition] = useState({});\r\n    const [restoMarkers, setRestoMarkers] = useState([]);\r\n    const [markersInBounds, setMarkersInBounds] = useState([]);\r\n    const [markersPlaceholder, setMarkersPlaceholder] = useState([]);\r\n    const [selected, setSelected] = useState(null);\r\n    const [drawMode, setDrawMode] = useState(false);\r\n    const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n    const [currentLocation, setCurrentLocation] = useState([]);\r\n    const { register, handleSubmit, reset, watch, setValue } = useForm({});\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [placeInfoOpen, setPlaceInfoOpen] = useState(false);\r\n    const [inBoundsMarkerInfoOpen, setInBoundsMarkerInfoOpen] = useState(false);\r\n    const [directionsResult, setDirectionsResult] = useState(null);\r\n    const [listToggleStatus, setListToggleStatus] = useState({\r\n        directions: false,\r\n        filters: false,\r\n        drawing: false\r\n    });\r\n    const { directions, filters, drawing } = listToggleStatus;\r\n    const [restoTypeFilter, setRestoTypeFilter] = useState({\r\n        fineDining: true,\r\n        casualDining: true,\r\n        fastFood: true,\r\n        cafe: true,\r\n        unlimitedFood: true,\r\n        others: true,\r\n    });\r\n    const { fineDining, casualDining, fastFood, cafe, unlimitedFood, others } = restoTypeFilter;\r\n    const daysOpenWatch = watch(\"daysOpen\");\r\n    const directionOriginWatch = watch(\"directionOrigin\");\r\n    const directionDestinationWatch = watch(\"directionDestination\");\r\n\r\n    const [rectangle, setRectangle] = useState({});\r\n    const [circle, setCircle] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchRestaurantData = async () => {\r\n            let markers = await getRestaurants();\r\n\r\n            let sortedRestoData = markers.sort(function (a, b) {\r\n                var textA = a.name.toUpperCase();\r\n                var textB = b.name.toUpperCase();\r\n                return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n            });\r\n\r\n            setMarkersPlaceholder(sortedRestoData);\r\n            setRestoMarkers(sortedRestoData);\r\n        }\r\n\r\n        fetchRestaurantData();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        var restoTypeKeys = Object.keys(restoTypeFilter);\r\n\r\n        var filteredTypes = restoTypeKeys.filter(function (key) {\r\n            return restoTypeFilter[key]\r\n        });\r\n\r\n        var indexOf = (arr, q) => arr.findIndex(item => q.toLocaleLowerCase().replace(/\\s/g, '') === item.toLowerCase());\r\n\r\n        const filterRestoData = async () => {\r\n            var filteredMarkers = markersPlaceholder.filter(function (resto) {\r\n                return indexOf(filteredTypes, resto.type) > -1;\r\n            });\r\n\r\n            let sortedRestoData = filteredMarkers.sort(function (a, b) {\r\n                var textA = a.name.toUpperCase();\r\n                var textB = b.name.toUpperCase();\r\n                return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n            });\r\n\r\n            setRestoMarkers(sortedRestoData);\r\n        }\r\n\r\n        filterRestoData();\r\n    }, [restoTypeFilter, markersPlaceholder])\r\n\r\n    const handleFiltersChange = (event) => {\r\n        setRestoTypeFilter({\r\n            ...restoTypeFilter,\r\n            [event.target.name]: event.target.checked,\r\n        });\r\n    };\r\n\r\n    const handleListItemChange = (listItem, listItemValue) => {\r\n        let directionsVal = false;\r\n        let filtersVal = false;\r\n        let drawingVal = false;\r\n        setDrawMode(false);\r\n        setDirectionsResult(null);\r\n\r\n        if (listItem === \"directions\" && !listItemValue) {\r\n            directionsVal = true;\r\n            filtersVal = false;\r\n            drawingVal = false;\r\n            clearMapDrawing();\r\n        }\r\n\r\n        if (listItem === \"filters\" && !listItemValue) {\r\n            directionsVal = false;\r\n            filtersVal = true;\r\n            drawingVal = false;\r\n            clearMapDrawing();\r\n        }\r\n\r\n        if (listItem === \"drawing\" && !listItemValue) {\r\n            directionsVal = false;\r\n            filtersVal = false;\r\n            drawingVal = true;\r\n        }\r\n\r\n        setListToggleStatus({\r\n            ...listToggleStatus,\r\n            directions: directionsVal,\r\n            filters: filtersVal,\r\n            drawing: drawingVal\r\n        });\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setSnackbarOpen(false);\r\n    };\r\n\r\n    const handleDialogClose = () => {\r\n        reset();\r\n        setDialogOpen(false);\r\n    };\r\n\r\n    const handlePlaceInfoClose = () => {\r\n        setPlaceInfoOpen(false);\r\n    };\r\n\r\n    const handleInBoundsMarkerInfoClose = () => {\r\n        setInBoundsMarkerInfoOpen(false);\r\n    };\r\n\r\n    const { isLoaded, loadError } = useLoadScript({\r\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\r\n        libraries\r\n    })\r\n\r\n    const GetLocation = ({ panToLocation }) => {\r\n        const classes = useStyles();\r\n        return (\r\n            <Fab className={classes.locateBtn} size=\"large\"\r\n                onClick={() => handleLocateUserClick({ panToLocation })}\r\n            >\r\n                <MyLocationIcon className={classes.locateIcon} />\r\n            </Fab>\r\n        )\r\n    }\r\n\r\n    const handleLocateUserClick = ({ panToLocation }) => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    const pos = {\r\n                        lat: position.coords.latitude,\r\n                        lng: position.coords.longitude,\r\n                    };\r\n                    panToLocation(pos.lat, pos.lng);\r\n\r\n                    let phDateNow = new Date();\r\n                    let phFormattedDate = `${phDateNow.toLocaleString(\"en-PH\", { month: \"long\" })}, ${phDateNow.getDate()} ${phDateNow.getFullYear()}`\r\n                    let phFormattedTime = phDateNow.toLocaleTimeString(\"en-PH\")\r\n\r\n                    setCurrentLocation({ ...pos, name: \"Your Location\", dateCreated: `${phFormattedDate} ${phFormattedTime}` });\r\n\r\n                    if (directions) {\r\n                        setValue('directionOrigin', pos.lat + \",\" + pos.lng);\r\n                    }\r\n                },\r\n                () => {\r\n                    //handleLocationError(true, infoWindow, map.getCenter());\r\n                }\r\n            );\r\n        } else {\r\n            // Browser doesn't support Geolocation\r\n            //handleLocationError(false, infoWindow, map.getCenter());\r\n        }\r\n    }\r\n\r\n    // Save resto information on state handler\r\n    const handleSaveRestaurant = useCallback(async values => {\r\n        try {\r\n            let phDateNow = new Date();\r\n            let phFormattedDate = `${phDateNow.toLocaleString(\"en-PH\", { month: \"long\" })}, ${phDateNow.getDate()} ${phDateNow.getFullYear()}`;\r\n            let phFormattedTime = phDateNow.toLocaleTimeString(\"en-PH\");\r\n\r\n            let updatedRestoData = [...restoMarkers, {\r\n                id: restoPosition.lat + \"\" + restoPosition.lng,\r\n                lat: parseFloat(restoPosition.lat),\r\n                lng: parseFloat(restoPosition.lng),\r\n                name: values.restoName,\r\n                type: values.restoType,\r\n                address: values.address,\r\n                description: values.description,\r\n                phone: values.phone,\r\n                specialtyFood: values.specialtyFood,\r\n                avgCustomer: values.avgCustomer,\r\n                totalCustomerVisits: values.totalCustomerVisits,\r\n                timeOpen: values.timeOpen,\r\n                timeClose: values.timeClose,\r\n                daysOpen: values.otherDaysOpen ? values.otherDaysOpen : values.daysOpen,\r\n                dateCreated: `${phFormattedDate} ${phFormattedTime}`\r\n            }];\r\n\r\n            let sortedRestoData = updatedRestoData.sort(function (a, b) {\r\n                var textA = a.name.toUpperCase();\r\n                var textB = b.name.toUpperCase();\r\n                return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;\r\n            });\r\n\r\n            setMarkersPlaceholder(sortedRestoData);\r\n            setRestoMarkers(sortedRestoData);\r\n            setDialogOpen(false);\r\n            reset();\r\n        } catch (error) {\r\n            // setSigninFailed(true)\r\n        }\r\n    }, [restoMarkers, restoPosition, reset])\r\n\r\n    const changeDirection = (origin, destination) => {\r\n        directionsService.route(\r\n            {\r\n                origin: origin,\r\n                destination: destination,\r\n                travelMode: window.google.maps.TravelMode.DRIVING\r\n            },\r\n            (result, status) => {\r\n                if (status === window.google.maps.DirectionsStatus.OK) {\r\n                    setDirectionsResult(result);\r\n                } else {\r\n                    console.error(`error fetching directions ${result}`);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    // Save resto information on state handler\r\n    const handleGetDirections = useCallback(async (values) => {\r\n        directionsService = new window.google.maps.DirectionsService();\r\n        changeDirection(values.directionOrigin, values.directionDestination);\r\n    }, [])\r\n\r\n    const PlaceInfoWindow = ({ restoDetails }) => (\r\n        <Dialog\r\n            open={placeInfoOpen}\r\n            TransitionComponent={TransitionDown}\r\n            keepMounted\r\n            onClose={handlePlaceInfoClose}\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n            PaperProps={{\r\n                style: {\r\n                    backgroundColor: 'transparent',\r\n                    boxShadow: 'none',\r\n                },\r\n            }}\r\n        >\r\n            <div className={classes.dialogTitle}>\r\n                <Typography variant=\"h4\" style={{ color: \"white\" }}>{restoDetails.name}</Typography>\r\n                <Typography variant=\"subtitle1\" style={{ color: \"white\" }}>{restoDetails.type}</Typography>\r\n            </div>\r\n            <DialogContent className={classes.dialogContent}>\r\n                <br />\r\n                <Typography variant=\"subtitle1\"><LocationOnIcon className={classes.icon} /> {restoDetails.address}</Typography>\r\n                <br />\r\n                <DialogContentText id=\"alert-dialog-slide-description\">{restoDetails.description}</DialogContentText>\r\n                <br />\r\n                <Grid container spacing={1} align=\"center\">\r\n                    <Grid item xs={6}>\r\n                        <Typography variant=\"subtitle2\"><b>Food Specialty:</b> {restoDetails.specialtyFood}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Typography variant=\"subtitle2\"><b>Phone:</b> {restoDetails.phone}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <br />\r\n                <Grid container spacing={1} align=\"center\">\r\n                    <Grid item xs={6}>\r\n                        <Typography variant=\"subtitle2\"><b>Customers/Day:</b> {restoDetails.avgCustomer}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Typography variant=\"subtitle2\"><b>Total Customer Visits:</b> {restoDetails.totalCustomerVisits}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <br />\r\n                <Grid container spacing={2} align=\"center\">\r\n                    <Grid item xs={6}>\r\n                        <Typography variant=\"subtitle2\"><b>Days Open:</b> {restoDetails.daysOpen}</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Typography variant=\"subtitle2\"><AccessTimeIcon className={classes.icon} /> {restoDetails.timeOpen} - {restoDetails.timeClose}</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <br /><hr />\r\n                <Grid container>\r\n                    <Grid item>\r\n                        <Typography variant=\"subtitle1\"><RateReviewIcon className={classes.icon} /> Reviews</Typography>\r\n                    </Grid>\r\n                    {restoDetails.reviews ? restoDetails.reviews.map((review) => (\r\n                        <Grid container key={review.id} className={classes.review}>\r\n                            <Grid item xs={12}>\r\n                                <Typography variant=\"subtitle2\">{review.reviewerName}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography className={classes.reviewText}>\r\n                                    <b>Rating:</b> {review.rating}/5\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography className={classes.reviewText}>{review.comment}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography className={classes.reviewText} style={{ color: \"grey\" }}>\r\n                                    {review.dateCreated}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    ))\r\n                        :\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Typography className={classes.reviewText}>No reviews</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n                </Grid>\r\n                <hr />\r\n            </DialogContent>\r\n            <DialogActions className={classes.dialogActions}>\r\n                {/* <Button className={classes.dialogButtons} onClick={() => { handlePlaceInfoClose(); handleListItemChange(\"directions\", false, restoDetails.lat + \",\" + restoDetails.lng); }}>Directions</Button> */}\r\n                <Button className={classes.closeBtn} onClick={handlePlaceInfoClose}>Close</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n\r\n    const MarkersInBoundsInfoWindow = ({ markersInBounds }) => (\r\n        <Dialog\r\n            open={inBoundsMarkerInfoOpen}\r\n            TransitionComponent={TransitionDown}\r\n            keepMounted\r\n            onClose={handleInBoundsMarkerInfoClose}\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n            PaperProps={{\r\n                style: {\r\n                    backgroundColor: 'transparent',\r\n                    boxShadow: 'none',\r\n                },\r\n            }}\r\n        >\r\n            <div className={classes.dialogTitle}>\r\n                <Typography variant=\"h4\" style={{ color: \"white\" }}>Restaurants Within the Area</Typography>\r\n                <Typography variant=\"subtitle1\" style={{ color: \"white\" }}>Total: {markersInBounds.length}</Typography>\r\n            </div>\r\n            <DialogContent className={classes.dialogContent}>\r\n                <Grid container>\r\n                    {markersInBounds.length > 0 ? markersInBounds.map((resto) => (\r\n                        <Grid container key={resto.id} className={classes.review}>\r\n                            <Grid item xs={12}>\r\n                                <Divider />\r\n                                <Typography variant=\"subtitle1\" style={{ marginTop: \"10px\" }}><b>{resto.name}</b> {resto.phone}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography className={classes.reviewText}>{resto.address}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <br />\r\n                                <Typography className={classes.reviewText}>{resto.description}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <br />\r\n                                <Typography className={classes.reviewText}>\r\n                                    {resto.daysOpen} | {resto.timeOpen} - {resto.timeClose}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                    ))\r\n                        :\r\n                        <Grid item xs={12}>\r\n                            <Typography className={classes.reviewText}>No Restaurants Within the Area</Typography>\r\n                        </Grid>\r\n                    }\r\n                </Grid>\r\n                <hr />\r\n            </DialogContent>\r\n            <DialogActions className={classes.dialogActions}>\r\n                <Button className={classes.closeBtn} onClick={handleInBoundsMarkerInfoClose}>Close</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n\r\n    const toggleDrawMode = () => {\r\n        setDrawMode(!drawMode);\r\n        clearMapDrawing();\r\n        setListToggleStatus({\r\n            ...listToggleStatus,\r\n            directions: false,\r\n            filters: false,\r\n            drawing: false\r\n        });\r\n        !drawMode && setSnackbarOpen(!snackbarOpen);\r\n    }\r\n\r\n    const clearMapDrawing = () => {\r\n        setRectangle({});\r\n        setCircle({});\r\n    }\r\n\r\n    const panToLocation = useCallback((lat, lng) => {\r\n        mapRef.current.panTo({ lat, lng });\r\n        mapRef.current.setZoom(14);\r\n    }, [])\r\n\r\n    const onMapClick = useCallback((event, mode) => {\r\n        let position = { lat: event.latLng.lat(), lng: event.latLng.lng() };\r\n\r\n        if (mode === \"directions\") {\r\n            setValue('directionOrigin', position.lat + \",\" + position.lng);\r\n        }\r\n\r\n        if (mode === \"draw\") {\r\n            setRestoPosition(position);\r\n            setDialogOpen(true);\r\n        }\r\n    }, [setValue])\r\n\r\n    const mapRef = useRef();\r\n    const onMapLoad = useCallback((map) => {\r\n        mapRef.current = map;\r\n    }, [])\r\n\r\n    if (loadError) return <h1>Error loading maps</h1>;\r\n    if (!isLoaded) return <h1>Loading Maps</h1>;\r\n\r\n    const checkMarkersInBounds = (shape) => {\r\n        let inBoundMarkers = [];\r\n\r\n        if (restoMarkers && Object.keys(circle).length !== 0 && shape === \"circle\") {\r\n            restoMarkers.forEach((resto) => {\r\n                var restaurantPosition = {\r\n                    lat: () => { return resto.lat },\r\n                    lng: () => { return resto.lng }\r\n                };\r\n\r\n                // let test = window.google.maps.geometry.spherical.computeDistanceBetween(circleCenter, restoPos);\r\n                let distanceFromMarkerToCenter = window.google.maps.geometry.spherical.computeDistanceBetween(circle.getCenter(), restaurantPosition);\r\n\r\n                if (distanceFromMarkerToCenter < circle.getRadius()) {\r\n                    inBoundMarkers.push(resto)\r\n                }\r\n            })\r\n        } else if (restoMarkers && Object.keys(rectangle).length !== 0 && shape === \"rectangle\") {\r\n            restoMarkers.forEach((resto) => {\r\n                if (rectangle.getBounds().contains({ lat: resto.lat, lng: resto.lng })) {\r\n                    inBoundMarkers.push(resto)\r\n                }\r\n            })\r\n        }\r\n\r\n        setInBoundsMarkerInfoOpen(true);\r\n        setMarkersInBounds(inBoundMarkers)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mapContainer}>\r\n            <Grid container>\r\n                <Grid item xs={10}>\r\n                    <GoogleMap\r\n                        mapContainerStyle={mapContainerStyle}\r\n                        zoom={14}\r\n                        center={cebuCoordinates}\r\n                        options={options}\r\n                        onClick={(event) => { drawMode ? onMapClick(event, \"draw\") : directions && onMapClick(event, \"directions\") }}\r\n                        onLoad={onMapLoad}\r\n                    >\r\n                        <Snackbar\r\n                            ContentProps={{\r\n                                classes: {\r\n                                    root: classes.snackbar\r\n                                }\r\n                            }}\r\n                            open={drawing}\r\n                            anchorOrigin={{\r\n                                vertical: \"top\",\r\n                                horizontal: \"left\"\r\n                            }}\r\n                            TransitionComponent={TransitionDown}\r\n                            message=\"Drawing mode is now enabled. Pick an overlay above.\"\r\n                            key={TransitionDown.name}\r\n                        />\r\n                        {drawing && <DrawingManager\r\n                            options={{\r\n                                drawingControl: true,\r\n                                drawingControlOptions: {\r\n                                    position: window.google.maps.ControlPosition.TOP_CENTER,\r\n                                    drawingModes: [\r\n                                        window.google.maps.drawing.OverlayType.CIRCLE,\r\n                                        window.google.maps.drawing.OverlayType.RECTANGLE,\r\n                                    ],\r\n                                },\r\n                                rectangleOptions: {\r\n                                    strokeWeight: 2,\r\n                                    clickable: false,\r\n                                    editable: false,\r\n                                    zIndex: 1,\r\n                                    visible: true\r\n                                },\r\n                            }}\r\n                            onRectangleComplete={(rectangle => {\r\n                                setRectangle(rectangle);\r\n                                rectangle.setMap(null);\r\n                            })}\r\n                            onCircleComplete={(circle => {\r\n                                setCircle(circle);\r\n                                circle.setMap(null);\r\n                            })}\r\n                            onUnmount={(drawingManager) => { }}\r\n                        />}\r\n                        {Object.keys(rectangle).length !== 0 && <Rectangle bounds={rectangle.getBounds()} />}\r\n                        {Object.keys(circle).length !== 0 && <Circle center={circle.getCenter()} radius={circle.getRadius()} />}\r\n\r\n                        {drawing && <Button\r\n                            className={classes.clearDrawingBtn}\r\n                            size=\"small\"\r\n                            onClick={() => clearMapDrawing()}\r\n                        >\r\n                            <Typography variant=\"subtitle1\">\r\n                                Clear Drawing\r\n                            </Typography>\r\n                        </Button>}\r\n\r\n                        <Snackbar\r\n                            ContentProps={{\r\n                                classes: {\r\n                                    root: classes.snackbar\r\n                                }\r\n                            }}\r\n                            open={snackbarOpen}\r\n                            anchorOrigin={{\r\n                                vertical: \"top\",\r\n                                horizontal: \"right\"\r\n                            }}\r\n                            onClose={handleClose}\r\n                            TransitionComponent={TransitionDown}\r\n                            message=\"Add a restaurant by clicking the location on the map first.\"\r\n                            key={TransitionDown.name}\r\n                        />\r\n                        <GetLocation panToLocation={panToLocation} />\r\n                        {restoMarkers.map((marker) => {\r\n                            return (<div key={marker.id}>\r\n                                <Marker\r\n                                    animation={2}\r\n                                    position={{ lat: marker.lat, lng: marker.lng }}\r\n                                    icon={{\r\n                                        url: restoPin,\r\n                                        scaledSize: new window.google.maps.Size(30, 30),\r\n                                        origin: new window.google.maps.Point(0, 0),\r\n                                        labelOrigin: new window.google.maps.Point(15, -10)\r\n                                    }}\r\n                                    label={{\r\n                                        text: marker.name,\r\n                                        fontSize: \"15px\",\r\n                                        fontWeight: \"bold\",\r\n                                        color: \"#000\",\r\n                                    }}\r\n                                    onClick={() => { setPlaceInfoOpen(true); setSelected(marker); }}\r\n                                >\r\n                                </Marker>\r\n                            </div>)\r\n                        })}\r\n\r\n                        {currentLocation &&\r\n                            <Marker\r\n                                animation={2}\r\n                                position={{ lat: parseFloat(currentLocation.lat), lng: parseFloat(currentLocation.lng) }}\r\n                                icon={{\r\n                                    url: currentLocationPin,\r\n                                    scaledSize: new window.google.maps.Size(30, 30),\r\n                                    origin: new window.google.maps.Point(0, 0),\r\n                                    anchor: new window.google.maps.Point(15, 15),\r\n                                    labelOrigin: new window.google.maps.Point(15, -10)\r\n                                }}\r\n                                label={{\r\n                                    text: currentLocation.name ? currentLocation.name : \"\",\r\n                                    fontSize: \"14px\",\r\n                                    fontWeight: \"bold\",\r\n                                    color: \"#000\",\r\n                                }}\r\n                                onClick={() => {\r\n                                    setSelected(currentLocation)\r\n                                }}\r\n                            />\r\n                        }\r\n\r\n                        <Button\r\n                            className={classes.drawBtn}\r\n                            size=\"small\"\r\n                            onClick={() => toggleDrawMode()}\r\n                        >\r\n                            {drawMode ?\r\n                                <Typography variant=\"subtitle1\">Done</Typography>\r\n                                :\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Add Restaurants\r\n                                </Typography>\r\n\r\n                            }\r\n                        </Button>\r\n\r\n                        <Dialog open={dialogOpen} onClose={handleDialogClose}>\r\n                            <DialogTitle className={classes.dialogTitle}>Add Restaurant</DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    NOTE: No servers are currently set up for this app. The restaurant data will not be saved on your next visit.\r\n                                </DialogContentText> <br />\r\n                                <form onSubmit={handleSubmit(handleSaveRestaurant)}>\r\n                                    <Grid container>\r\n                                        <TextField\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            id=\"resto-name\"\r\n                                            name=\"restoName\"\r\n                                            label=\"Restaurant Name\"\r\n                                            variant=\"filled\"\r\n                                            fullWidth\r\n                                            required\r\n                                            {...register(\"restoName\")}\r\n                                        />\r\n                                        <FormControl fullWidth margin=\"dense\">\r\n                                            <InputLabel id=\"resto-type-label\" required>Restaurant Type</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"resto-type-label\"\r\n                                                id=\"resto-type-select\"\r\n                                                name=\"restoType\"\r\n                                                placeholder=\"Select Type...\"\r\n                                                label=\"Restaurant Type\"\r\n                                                defaultValue=\"Others\"\r\n                                                required\r\n                                                {...register(\"restoType\")}\r\n                                            >\r\n                                                <MenuItem value=\"Fine Dining\">Fine Dining</MenuItem>\r\n                                                <MenuItem value=\"Casual Dining\">Casual Dining</MenuItem>\r\n                                                <MenuItem value=\"Unlimited Food\">Unlimited Food</MenuItem>\r\n                                                <MenuItem value=\"Fast Food\">Fast Food</MenuItem>\r\n                                                <MenuItem value=\"Cafe\">Cafe</MenuItem>\r\n                                                <MenuItem value=\"Others\">Others</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        <Grid container spacing={2}>\r\n                                            <Grid item xs={6} md={6}>\r\n                                                <TextField\r\n                                                    margin=\"dense\"\r\n                                                    id=\"resto-address\"\r\n                                                    name=\"restoAddress\"\r\n                                                    label=\"Address\"\r\n                                                    placeholder=\"e.g. No. 1 Dr Jose P. Rizal St, Cebu City, Cebu\"\r\n                                                    variant=\"filled\"\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    {...register(\"address\")}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={6} md={6}>\r\n                                                <TextField\r\n                                                    margin=\"dense\"\r\n                                                    id=\"phone\"\r\n                                                    name=\"phone\"\r\n                                                    label=\"Phone\"\r\n                                                    placeholder=\"e.g. (012) 345 6789\"\r\n                                                    variant=\"filled\"\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    {...register(\"phone\")}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <TextField\r\n                                            margin=\"dense\"\r\n                                            id=\"resto-description\"\r\n                                            name=\"restoDesc\"\r\n                                            label=\"Short Description\"\r\n                                            placeholder=\"e.g. Calm environment, get productive while dining...\"\r\n                                            variant=\"filled\"\r\n                                            fullWidth\r\n                                            required\r\n                                            {...register(\"description\")}\r\n                                        />\r\n                                        <TextField\r\n                                            margin=\"dense\"\r\n                                            id=\"specialty-food\"\r\n                                            name=\"specialtyFood\"\r\n                                            label=\"Specialty Food\"\r\n                                            placeholder=\"e.g. Steak\"\r\n                                            variant=\"filled\"\r\n                                            fullWidth\r\n                                            required\r\n                                            {...register(\"specialtyFood\")}\r\n                                        />\r\n                                        <Grid container spacing={2}>\r\n                                            <Grid item xs={6}>\r\n                                                <TextField\r\n                                                    margin=\"dense\"\r\n                                                    id=\"customer-visits\"\r\n                                                    name=\"customerVisits\"\r\n                                                    label=\"Average Customers Per Day\"\r\n                                                    variant=\"filled\"\r\n                                                    type=\"number\"\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    {...register(\"avgCustomer\")}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={6}>\r\n                                                <TextField\r\n                                                    margin=\"dense\"\r\n                                                    id=\"total-customer-visits\"\r\n                                                    name=\"totalCustomerVisits\"\r\n                                                    label=\"Total Customers Visited\"\r\n                                                    variant=\"filled\"\r\n                                                    type=\"number\"\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    {...register(\"totalCustomerVisits\")}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid container spacing={2}>\r\n                                            <Grid item xs={6} md={6}>\r\n                                                <TextField\r\n                                                    InputLabelProps={{\r\n                                                        shrink: true,\r\n                                                    }}\r\n                                                    margin=\"dense\"\r\n                                                    id=\"time-open\"\r\n                                                    name=\"timeOpen\"\r\n                                                    label=\"Time Open\"\r\n                                                    variant=\"filled\"\r\n                                                    type=\"time\"\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    {...register(\"timeOpen\")}\r\n                                                />\r\n                                            </Grid>\r\n                                            <Grid item xs={6} md={6}>\r\n                                                <TextField\r\n                                                    InputLabelProps={{\r\n                                                        shrink: true,\r\n                                                    }}\r\n                                                    margin=\"dense\"\r\n                                                    id=\"time-close\"\r\n                                                    name=\"timeClose\"\r\n                                                    label=\"Time Close\"\r\n                                                    variant=\"filled\"\r\n                                                    type=\"time\"\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    {...register(\"timeClose\")}\r\n                                                />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <FormControl fullWidth margin=\"dense\">\r\n                                            <InputLabel id=\"days-open-label\" required>Days Open</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"days-open-label\"\r\n                                                id=\"days-open-select\"\r\n                                                name=\"daysOpen\"\r\n                                                placeholder=\"Select Days...\"\r\n                                                label=\"Days Open\"\r\n                                                defaultValue=\"Others\"\r\n                                                required\r\n                                                {...register(\"daysOpen\")}\r\n                                            >\r\n                                                <MenuItem value=\"Monday - Sunday\">Monday - Sunday</MenuItem>\r\n                                                <MenuItem value=\"Monday - Friday\">Monday - Friday</MenuItem>\r\n                                                <MenuItem value=\"Friday - Sunday\">Friday - Sunday</MenuItem>\r\n                                                <MenuItem value=\"Saturday - Sunday\">Saturday - Sunday</MenuItem>\r\n                                                <MenuItem value=\"Others\">Others</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        {daysOpenWatch === \"Others\" &&\r\n                                            <TextField\r\n                                                margin=\"dense\"\r\n                                                id=\"other-days-open\"\r\n                                                name=\"otherDaysOpen\"\r\n                                                label=\"Please specify the days\"\r\n                                                variant=\"filled\"\r\n                                                type=\"text\"\r\n                                                fullWidth\r\n                                                required\r\n                                                {...register(\"otherDaysOpen\")}\r\n                                            />\r\n                                        }\r\n                                        <Grid container justifyContent=\"flex-end\" alignItems=\"flex-end\">\r\n                                            <Grid item>\r\n                                                <DialogActions>\r\n                                                    <Button className={classes.closeBtn} onClick={handleDialogClose}>Cancel</Button>\r\n                                                    <Button className={classes.drawOnMapBtn} type=\"submit\">Save</Button>\r\n                                                </DialogActions>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </form>\r\n                            </DialogContent>\r\n                        </Dialog>\r\n\r\n                        {selected && <PlaceInfoWindow restoDetails={selected} />}\r\n                        {markersInBounds && <MarkersInBoundsInfoWindow markersInBounds={markersInBounds} />}\r\n                        {directions && directionsResult !== null && (\r\n                            <DirectionsRenderer directions={directionsResult} />\r\n                        )}\r\n                    </GoogleMap>\r\n                </Grid>\r\n\r\n                <Grid item xs={2} className={classes.sidebar}>\r\n                    <Grid container>\r\n                        <Grid item xs={12} className={classes.sidebarTitle} align=\"center\">\r\n                            <Typography variant=\"h5\">\r\n                                <img className={classes.rcLogo} src={logo} alt=\"resto-cebu-logo\" />\r\n                                <b>Resto Cebu</b>\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <List component=\"nav\" aria-label=\"mailbox folders\">\r\n                                <ListItem button onClick={() => handleListItemChange(\"directions\", directions)}>\r\n                                    <Typography variant=\"subtitle1\">Directions to Restaurant</Typography>\r\n                                </ListItem>\r\n                                {directions && <Grow\r\n                                    in={directions}\r\n                                    style={{ transformOrigin: '0 0 0' }}\r\n                                    {...(directions ? { timeout: 1000 } : {})}>\r\n                                    <ListItem>\r\n                                        <Grid item xs={12}>\r\n                                            <form onSubmit={handleSubmit(handleGetDirections)}>\r\n                                                <Grid container>\r\n                                                    <TextField\r\n                                                        autoFocus\r\n                                                        margin=\"dense\"\r\n                                                        id=\"direction-origin\"\r\n                                                        name=\"directionOrigin\"\r\n                                                        value={directionOriginWatch ? directionOriginWatch : \"\"}\r\n                                                        label=\"From\"\r\n                                                        inputProps={\r\n                                                            { readOnly: true, }\r\n                                                        }\r\n                                                        InputProps={{ style: { fontSize: \"10px\" } }}\r\n                                                        InputLabelProps={{ style: { fontSize: \"15px\" } }}\r\n                                                        placeholder=\"Choose starting point by clicking on the map\"\r\n                                                        variant=\"filled\"\r\n                                                        fullWidth\r\n                                                        required\r\n                                                        {...register(\"directionOrigin\")}\r\n                                                    />\r\n                                                    <FormHelperText style={{ fontSize: \"10px\" }}>To use your current location. Click the target icon on the map. You can click anywhere on the map if you want to change the location.</FormHelperText>\r\n\r\n                                                    <FormControl fullWidth margin=\"dense\">\r\n                                                        <InputLabel id=\"destination-label\" required>Destination</InputLabel>\r\n                                                        <Select\r\n                                                            labelId=\"destination-label\"\r\n                                                            id=\"direction-destination\"\r\n                                                            name=\"directionDestination\"\r\n                                                            placeholder=\"Destination\"\r\n                                                            label=\"Destination\"\r\n                                                            defaultValue={restoMarkers.length > 0 ? restoMarkers[0].lat + \",\" + restoMarkers[0].lng : \"default\"}\r\n                                                            required\r\n                                                            {...register(\"directionDestination\")}\r\n                                                        >\r\n                                                            <MenuItem value=\"default\" disabled>\r\n                                                                Select a restaurant...\r\n                                                            </MenuItem>\r\n                                                            {restoMarkers.length > 0 &&\r\n                                                                restoMarkers.map((resto) => {\r\n                                                                    return (\r\n                                                                        <MenuItem key={resto.id} value={resto.lat + \",\" + resto.lng} >\r\n                                                                            {resto.name}&nbsp;<Typography variant=\"subtitle1\" style={{ fontSize: \"12px\" }}>({resto.address})</Typography>\r\n                                                                        </MenuItem>)\r\n                                                                })\r\n                                                            }\r\n                                                        </Select>\r\n                                                    </FormControl>\r\n                                                    <Grid container justifyContent=\"center\" alignItems=\"center\" style={{ marginTop: \"15px\", marginBottom: \"10px\" }}>\r\n                                                        <Grid item>\r\n                                                            <Button className={classes.directionGoBtn} type=\"submit\" disabled={!directionOriginWatch || restoMarkers.length <= 0 || directionDestinationWatch === \"default\"}><NavigationIcon />Get Directions</Button>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Grid>\r\n                                            </form>\r\n                                        </Grid>\r\n                                    </ListItem>\r\n                                </Grow>}\r\n                                <Divider />\r\n                                <ListItem button onClick={() => handleListItemChange(\"filters\", filters)}>\r\n                                    <Typography variant=\"subtitle1\">Restaurant Type</Typography>\r\n                                </ListItem>\r\n                                {filters && <Grow\r\n                                    in={filters}\r\n                                    style={{ transformOrigin: '0 0 0' }}\r\n                                    {...(filters ? { timeout: 1000 } : {})}>\r\n                                    <ListItem>\r\n                                        <Grid className={classes.sidebarItem} item xs={12}>\r\n                                            <Grid item xs={12}>\r\n                                                <FormGroup>\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox checked={fineDining} onChange={handleFiltersChange} color=\"primary\" name=\"fineDining\" />\r\n                                                        }\r\n                                                        label=\"Fine Dining\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox checked={casualDining} onChange={handleFiltersChange} color=\"primary\" name=\"casualDining\" />\r\n                                                        }\r\n                                                        label=\"Casual Dining\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox checked={unlimitedFood} onChange={handleFiltersChange} color=\"primary\" name=\"unlimitedFood\" />\r\n                                                        }\r\n                                                        label=\"Unlimited Food\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox checked={fastFood} onChange={handleFiltersChange} color=\"primary\" name=\"fastFood\" />\r\n                                                        }\r\n                                                        label=\"Fast Food\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox checked={cafe} onChange={handleFiltersChange} color=\"primary\" name=\"cafe\" />\r\n                                                        }\r\n                                                        label=\"Cafe\"\r\n                                                    />\r\n                                                    <FormControlLabel\r\n                                                        control={\r\n                                                            <Checkbox checked={others} onChange={handleFiltersChange} color=\"primary\" name=\"others\" />\r\n                                                        }\r\n                                                        label=\"Others\"\r\n                                                    />\r\n                                                </FormGroup>\r\n                                                <FormHelperText>Filters will reflect on the map</FormHelperText>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </ListItem>\r\n                                </Grow>}\r\n                                <Divider />\r\n                                <ListItem button onClick={() => handleListItemChange(\"drawing\", drawing)}>\r\n                                    <Typography variant=\"subtitle1\">Draw on Map</Typography>\r\n                                </ListItem>\r\n                                {drawing && <Grow\r\n                                    in={drawing}\r\n                                    style={{ transformOrigin: '0 0 0' }}\r\n                                    {...(drawing ? { timeout: 1000 } : {})}>\r\n                                    <ListItem>\r\n                                        <Grid className={classes.sidebarItem} item xs={12}>\r\n                                            <Grid item xs={12}>\r\n                                                <FormHelperText>You can now draw circles and rectangles on the map using the overlay menu at the top.<br /><br />Clicking the buttons below will show the data of restaurants that are located within the area of those shapes that you've created.<br /><br /></FormHelperText>\r\n                                                <Grid item xs={12}>\r\n                                                    <Button className={classes.drawOnMapBtn} onClick={() => checkMarkersInBounds(\"circle\")}>Check Circle</Button>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    <Button className={classes.drawOnMapBtn} onClick={() => checkMarkersInBounds(\"rectangle\")}>Check Rectangle</Button>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </ListItem>\r\n                                </Grow>}\r\n                                <Divider />\r\n                            </List>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Map\r\n","export default __webpack_public_path__ + \"static/media/your_location_pin.40c72a0a.png\";","export default __webpack_public_path__ + \"static/media/restaurant_pin.ae300e7d.png\";","export default __webpack_public_path__ + \"static/media/rc_logo.7709aab2.png\";","import axios from 'axios';\r\n\r\nexport const getRestaurants = async () => {\r\n    return await axios.get(window.location.href + '/db/restaurant.json')\r\n        .then((res) => {\r\n            return [...res.data];\r\n        }).catch((err) => {\r\n            return {};\r\n        })\r\n}\r\n\r\n// export const setRestaurants = async (restaurants) => {\r\n\r\n//     const json = JSON.stringify(restaurants);\r\n//     const res = await axios.post('./db/restaurant.json', { data: json }, {\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         }\r\n//     });\r\n\r\n//     return res.data\r\n// }","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles((theme) => ({\r\n    rcLogo: {\r\n        height: '35px',\r\n        width: '38px',\r\n        verticalAlign: 'middle',\r\n        marginRight: '12px',\r\n    },\r\n    paper: {\r\n        padding: '10px', display: 'flex', flexDirection: 'column', justifyContent: 'center', width: '100px',\r\n    },\r\n    mapContainer: {\r\n        height: '85vh', width: '100%'\r\n    },\r\n    sidebar: {\r\n        backgroundColor: 'whitesmoke',\r\n        color: \"black\"\r\n    },\r\n    sidebarItem: {\r\n        padding: \"7px\",\r\n    },\r\n    sidebarTitle: {\r\n        backgroundColor: 'rgb(1, 1, 1, 0.9)',\r\n        padding: '8px',\r\n        color: '#fff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center'\r\n    },\r\n    checkbox: {\r\n    },\r\n    markerContainer: {\r\n        position: 'absolute', transform: 'translate(-50%, -50%)', zIndex: 1, '&:hover': { zIndex: 2 },\r\n    },\r\n    pointer: {\r\n        cursor: 'pointer',\r\n    },\r\n    locateBtn: {\r\n        position: 'absolute',\r\n        top: '1rem',\r\n        right: '1rem',\r\n        border: 'none',\r\n        zIndex: '10',\r\n        backgroundColor: 'rgb(1, 1, 1, 0.7)',\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgb(1, 1, 1, 0.8)\",\r\n        },\r\n    },\r\n    locateIcon: {\r\n        transform: 'scale(1.3)',\r\n        color: 'rgb(255, 255, 255, 1)',\r\n    },\r\n    drawBtn: {\r\n        paddingLeft: \"15px\",\r\n        paddingRight: \"15px\",\r\n        position: 'absolute',\r\n        textTransform: 'none',\r\n        bottom: '2rem',\r\n        left: '1rem',\r\n        border: 'none',\r\n        zIndex: '10',\r\n        backgroundColor: 'rgb(222, 170, 29, 0.8)',\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgb(222, 170, 29, 1)\",\r\n        },\r\n        color: 'white'\r\n    },\r\n    drawBtnDisabled: {\r\n        paddingLeft: \"15px\",\r\n        paddingRight: \"15px\",\r\n        position: 'absolute',\r\n        textTransform: 'none',\r\n        bottom: '2rem',\r\n        left: '1rem',\r\n        border: 'none',\r\n        zIndex: '10',\r\n        color: 'gray',\r\n        backgroundColor: 'rgb(222, 170, 29, 0.5)',\r\n    },\r\n    snackbar: {\r\n        backgroundColor: 'rgb(219, 93, 61, 1)',\r\n    },\r\n    dialogTitle: {\r\n        backgroundColor: 'rgb(222, 170, 29, 1)',\r\n        paddingTop: '16px',\r\n        paddingBottom: '16px',\r\n        paddingLeft: '22px',\r\n        paddingRight: '22px',\r\n        color: \"white\"\r\n    },\r\n    dialogContent: {\r\n        backgroundColor: 'rgb(255, 255, 255, 0.9)',\r\n    },\r\n    dialogActions: {\r\n        backgroundColor: 'rgb(255, 255, 255, 0.9)',\r\n        paddingBottom: '16px'\r\n    },\r\n    dialogButtons: {\r\n        paddingLeft: \"15px\",\r\n        paddingRight: \"15px\",\r\n        backgroundColor: \"#4A89F3\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgb(222, 170, 29, 0.8)\",\r\n        },\r\n        color: \"white\",\r\n        borderRadius: \"30px\"\r\n    },\r\n    icon: {\r\n        marginBottom: -6\r\n    },\r\n    review: {\r\n        marginTop: \"15px\",\r\n        marginBottom: \"10px\"\r\n    },\r\n    reviewText: {\r\n        fontSize: \"13px\"\r\n    },\r\n    directionGoBtn: {\r\n        paddingLeft: \"10px\",\r\n        paddingRight: \"15px\",\r\n        backgroundColor: \"#4A89F3\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgb(222, 170, 29, 0.9)\",\r\n        },\r\n        color: \"white\",\r\n        borderRadius: \"30px\"\r\n    },\r\n    drawOnMapBtn: {\r\n        width: \"100%\",\r\n        paddingLeft: \"10px\",\r\n        paddingRight: \"10px\",\r\n        marginTop: \"15px\",\r\n        backgroundColor: \"#4A89F3\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgb(222, 170, 29, 0.9)\",\r\n        },\r\n        color: \"white\",\r\n    },\r\n    clearDrawingBtn: {\r\n        fontSize: '10px',\r\n        paddingLeft: '15px',\r\n        paddingRight: '15px',\r\n        position: 'absolute',\r\n        textTransform: 'none',\r\n        bottom: '2rem',\r\n        right: '5rem',\r\n        border: 'none',\r\n        zIndex: '10',\r\n        backgroundColor: 'rgb(221, 75, 62, 0.7)',\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgb(221, 75, 62, 0.9)\",\r\n        },\r\n        color: 'white'\r\n    },\r\n    closeBtn: {\r\n        width: \"20%\",\r\n        paddingLeft: \"10px\",\r\n        paddingRight: \"10px\",\r\n        marginTop: \"15px\",\r\n        backgroundColor: \"rgb(221, 75, 62, 0.9)\",\r\n        \"&:hover\": {\r\n            backgroundColor: \"rgb(222, 170, 29, 0.9)\",\r\n        },\r\n        color: \"white\",\r\n    }\r\n}));","import './App.css';\nimport { CssBaseline, Grid } from '@material-ui/core';\nimport Map from './components/Map/Map';\n\nconst App = () => {\n  return (\n    <>\n      <CssBaseline />\n      <Grid container style={{ width: '100%' }}>\n        <Grid item xs={12} md={12}>\n          <Map />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}